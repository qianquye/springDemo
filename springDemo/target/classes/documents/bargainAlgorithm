砍价算法
 举例说明：
第一个算法：原价0.04元，底价：0.01元，帮砍的价格差0.04-0.01=0.03元，帮砍次数：2次
0.03/3=0.01（保留小数点后两位，只舍不入），则采用第一个算法：
第一次：0.03/2=0.01
第二次：0.03-0.01=0.02

第二个算法：原价110元，底价：10元，帮砍的价格差110-10=100元，帮砍次数：5次
100/5的商值大于0.01，则采用第二个算法
第一次砍价的金额区间：（100-0.01）*（1/6）~（100-0.01）*（1/4），即在区间16.67~25随机取值，假设第一次砍价是18元
第二次砍价的金额区间：（100-0.01-18）*（1/5）~（100-0.01-18）*（1/3），即在区间16.40~27.33随机取值，假设第二次砍价是25.12元
第三次砍价的金额区间：（100-0.01-18-25.12）*（1/4）~（100-0.01-18-25.12）*（1/2），即在区间14.22~28.44随机取值，假设第三次砍价是15.08元
第四次砍价的金额区间：（100-0.01-18-25.12-15.08）*（1/3）~（100-0.01-18-25.12-15.08）*（1/1），即在区间13.93~41.79随机取值，假设第四次砍价是30.08元
第五次的砍价=100-18-25.12-15.08-30.08=11.72元

砍价算法公式：
原价X元，底价Y元，帮砍次数N次，砍价差值Z=X-Y
保留小数点后两位，只舍不入，设定最小的砍价单元为0.01元
1、若砍价差值/帮砍次数的商值=0.01，则
第一次至N-1次：
砍价差值/帮砍次数=帮砍价格
第N次算法：
砍价差值-已分摊砍价总和；
2、若砍价差值/帮砍次数的商值>0.01，则
第一次至N-1次：
（砍价差值-0.01-已分摊砍价总和）/（总次数+1-当前所属次数）~
（砍价差值-0.01-已分摊砍价总和）/（总次数-1-当前所属次数）；
第N次算法：
砍价差值-已分摊砍价总和；
具体算法：
第一次砍价随机区间值为：（Z-0.01）/（N+1-0）~（Z-0.01）/（N-1），假设第一次砍价值为k1
第二次砍价随机区间值为：（Z-0.01-k1）/（N+1-1）~（Z-0.01-k1）/（N-2），假设第二次砍价值为k2


第N-2次砍价随机区间值为：（Z-0.01-k1-k2-....-k(N-3)）/（N+1-(N-2-1)）~（Z-0.01-k1-k2-....-k(N-4)-k(N-3)）/2），假设第N-2次砍价值为k（N-2）
第N-1次砍价随机区间值为：（Z-0.01-k1-k2-....-k(N-3)-k(N-2)）/（N+1-(N-1-1)）~（Z-0.01-k1-k2-....-k(N-3)-k(N-2)）/1），假设第N-1次砍价值为k（N-1）
则第N次砍价金额：k（N）=Z-k1-k2-....-k(N-2)-k(N-1)


--------------------------
//格式化小数，保留两位小数
public static double formateDoubleTwoLength(Double dValue){
   double rValue = 0.00D;
   if(dValue ! = null && !Double.isNaN(dValue)){
      BigDecimal bd = new BigDecimal(dValue);
      rValue = bd.setScale(2,BigDecimal.ROUND_HALF_DOWN).doubleValue();
   }
   return rValue;
}

//预生成砍价数据
/**
  orgPrice 原价
  floorPrice 底价
  minPrice 最小出出值
  num 次数
**/
public void randonMoney(Double orgPrice,Double floorPrice ,Double minPrice,int num){
  Double totalBarPrice = 0.0;
  Double diffPrice = orgPrice - floorPrice;
  int bnum = num;
  for(int i = 0; i < num; i++){
    Double curBargainPrice = 0.0;
    if(diffPrice > minPrice){
       if(i == num-1){
          curBargainPrice = NumberUtil.formateDoubleTwoLength(diffPrice - totalBarPrice);
       }else{
          curBargainPrice = curSelectMoney((diffPrice - minPrice - totalBargainPrice),bnum);
          totalBarPrice += curBargainPrice;
          bnum --;
       }
     }else{
       if(i == num -1){
           curBargainPrice = NumberUtil.formateDoubleTwoLength(diffPrice - totalBarPrice);
       }else{
          curBargainPrice = curSelectMoney(diffPrice/num);
          totalBarPrice += curBargainPrice;
       }
     }
  }
}

//计算随机金额（在一个区间内计算随机金额）
public static Double curSelectMoney(Double money,Integer num){
   Double moneyStart = NumberUtil.formateDoubleTwoLength((money)/(num+1));
   Double moneyEnd = NumberUtil.formateDoubleTwoLength((money)/(num-1));
   Double curMoney = countSelectMoneyNew(moneyStart,moneyEnd);
   return curMoney;
}

//计算随机金额（在一个区间内计算随机金额）
public static Double countSectionMoneyNew(Double moneyStart,Double moneyEnd){
   Double reMoney = MumberUtil.formatDoubleTwoLength(moneyStart +((moneyEnd - moneyStart)*Math.random()));
   return reMoney;
}






 